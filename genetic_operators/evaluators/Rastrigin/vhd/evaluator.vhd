-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc/Rastrigin/Rastrigin.vhd
-- Created: 2021-07-14 22:58:58
-- 
-- Generated by MATLAB 9.6 and HDL Coder 3.14
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1
-- Target subsystem base rate: 1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Rastrigin
-- Source Path: Rastrigin/Rastrigin
-- Hierarchy Level: 0
-- 
-- Simulink subsystem description for Rastrigin/Rastrigin:
-- 
-- This block was created using function approximation.
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Rastrigin_pkg.ALL;

ENTITY evaluator IS
  PORT( In1                               :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix16_En12
        In2                               :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix16_En12
        Out1                              :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En5
        );
END evaluator;


ARCHITECTURE rtl OF evaluator IS

  -- Constants
  CONSTANT LUT_data                       : vector_of_signed16(0 TO 64) := 
    (to_signed(16#2E91#, 16), to_signed(16#3E0B#, 16), to_signed(16#1411#, 16), to_signed(-16#287D#, 16),
     to_signed(-16#3F8E#, 16), to_signed(-16#1BC5#, 16), to_signed(16#21BB#, 16), to_signed(16#3FFF#, 16),
     to_signed(16#2301#, 16), to_signed(-16#1A67#, 16), to_signed(-16#3F5C#, 16), to_signed(-16#29A6#, 16),
     to_signed(16#12A1#, 16), to_signed(16#3DA8#, 16), to_signed(16#2F97#, 16), to_signed(-16#0A8B#, 16),
     to_signed(-16#3AEA#, 16), to_signed(-16#34BB#, 16), to_signed(16#0247#, 16), to_signed(16#372E#, 16),
     to_signed(16#38FC#, 16), to_signed(16#0606#, 16), to_signed(-16#3284#, 16), to_signed(-16#3C47#, 16),
     to_signed(-16#0E3A#, 16), to_signed(16#2D00#, 16), to_signed(16#3E8E#, 16), to_signed(16#1630#, 16),
     to_signed(-16#26BA#, 16), to_signed(-16#3FC8#, 16), to_signed(-16#1DC6#, 16), to_signed(16#1FCD#, 16),
     to_signed(16#3FEE#, 16), to_signed(16#24DC#, 16), to_signed(-16#1857#, 16), to_signed(-16#3F01#, 16),
     to_signed(-16#2B53#, 16), to_signed(16#1078#, 16), to_signed(16#3D04#, 16), to_signed(16#3110#, 16),
     to_signed(-16#0852#, 16), to_signed(-16#3A00#, 16), to_signed(-16#35F9#, 16), to_signed(16#0009#, 16),
     to_signed(16#3602#, 16), to_signed(16#39F9#, 16), to_signed(16#0841#, 16), to_signed(-16#311B#, 16),
     to_signed(-16#3CFF#, 16), to_signed(-16#1068#, 16), to_signed(16#2B60#, 16), to_signed(16#3EFE#, 16),
     to_signed(16#1847#, 16), to_signed(-16#24EA#, 16), to_signed(-16#3FED#, 16), to_signed(-16#1FBE#, 16),
     to_signed(16#1DD5#, 16), to_signed(16#3FC9#, 16), to_signed(16#26AC#, 16), to_signed(-16#1640#, 16),
     to_signed(-16#3E92#, 16), to_signed(-16#2CF4#, 16), to_signed(16#0E4A#, 16), to_signed(16#3C4D#, 16),
     to_signed(16#3279#, 16));  -- sfix16 [65]
  CONSTANT LUT1_data                      : vector_of_signed16(0 TO 64) := 
    (to_signed(16#2E91#, 16), to_signed(16#3E0B#, 16), to_signed(16#1411#, 16), to_signed(-16#287D#, 16),
     to_signed(-16#3F8E#, 16), to_signed(-16#1BC5#, 16), to_signed(16#21BB#, 16), to_signed(16#3FFF#, 16),
     to_signed(16#2301#, 16), to_signed(-16#1A67#, 16), to_signed(-16#3F5C#, 16), to_signed(-16#29A6#, 16),
     to_signed(16#12A1#, 16), to_signed(16#3DA8#, 16), to_signed(16#2F97#, 16), to_signed(-16#0A8B#, 16),
     to_signed(-16#3AEA#, 16), to_signed(-16#34BB#, 16), to_signed(16#0247#, 16), to_signed(16#372E#, 16),
     to_signed(16#38FC#, 16), to_signed(16#0606#, 16), to_signed(-16#3284#, 16), to_signed(-16#3C47#, 16),
     to_signed(-16#0E3A#, 16), to_signed(16#2D00#, 16), to_signed(16#3E8E#, 16), to_signed(16#1630#, 16),
     to_signed(-16#26BA#, 16), to_signed(-16#3FC8#, 16), to_signed(-16#1DC6#, 16), to_signed(16#1FCD#, 16),
     to_signed(16#3FEE#, 16), to_signed(16#24DC#, 16), to_signed(-16#1857#, 16), to_signed(-16#3F01#, 16),
     to_signed(-16#2B53#, 16), to_signed(16#1078#, 16), to_signed(16#3D04#, 16), to_signed(16#3110#, 16),
     to_signed(-16#0852#, 16), to_signed(-16#3A00#, 16), to_signed(-16#35F9#, 16), to_signed(16#0009#, 16),
     to_signed(16#3602#, 16), to_signed(16#39F9#, 16), to_signed(16#0841#, 16), to_signed(-16#311B#, 16),
     to_signed(-16#3CFF#, 16), to_signed(-16#1068#, 16), to_signed(16#2B60#, 16), to_signed(16#3EFE#, 16),
     to_signed(16#1847#, 16), to_signed(-16#24EA#, 16), to_signed(-16#3FED#, 16), to_signed(-16#1FBE#, 16),
     to_signed(16#1DD5#, 16), to_signed(16#3FC9#, 16), to_signed(16#26AC#, 16), to_signed(-16#1640#, 16),
     to_signed(-16#3E92#, 16), to_signed(-16#2CF4#, 16), to_signed(16#0E4A#, 16), to_signed(16#3C4D#, 16),
     to_signed(16#3279#, 16));  -- sfix16 [65]

  -- Signals
  SIGNAL In1_signed                       : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Constant1_out1                   : unsigned(15 DOWNTO 0);  -- ufix16_En12
  SIGNAL In2_signed                       : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Product_mul_temp                 : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product_out1                     : unsigned(15 DOWNTO 0);  -- ufix16_En9
  SIGNAL Constant_out1                    : unsigned(15 DOWNTO 0);  -- ufix16_En10
  SIGNAL Product1_cast                    : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL Product1_mul_temp                : signed(32 DOWNTO 0);  -- sfix33_En24
  SIGNAL Product1_cast_1                  : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product1_out1                    : signed(15 DOWNTO 0);  -- sfix16_En9
  SIGNAL LUT_out1                         : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product2_cast                    : signed(16 DOWNTO 0);  -- sfix17_En10
  SIGNAL Product2_mul_temp                : signed(32 DOWNTO 0);  -- sfix33_En24
  SIGNAL Product2_cast_1                  : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product2_out1                    : signed(15 DOWNTO 0);  -- sfix16_En6
  SIGNAL Add_sub_cast                     : signed(31 DOWNTO 0);  -- sfix32_En9
  SIGNAL Add_sub_cast_1                   : signed(31 DOWNTO 0);  -- sfix32_En9
  SIGNAL Add_sub_temp                     : signed(31 DOWNTO 0);  -- sfix32_En9
  SIGNAL Add_out1                         : signed(15 DOWNTO 0);  -- sfix16_En6
  SIGNAL Product3_mul_temp                : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product3_out1                    : unsigned(15 DOWNTO 0);  -- ufix16_En9
  SIGNAL Constant2_out1                   : unsigned(15 DOWNTO 0);  -- ufix16_En10
  SIGNAL Product4_cast                    : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL Product4_mul_temp                : signed(32 DOWNTO 0);  -- sfix33_En24
  SIGNAL Product4_cast_1                  : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product4_out1                    : signed(15 DOWNTO 0);  -- sfix16_En9
  SIGNAL LUT1_out1                        : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product5_cast                    : signed(16 DOWNTO 0);  -- sfix17_En10
  SIGNAL Product5_mul_temp                : signed(32 DOWNTO 0);  -- sfix33_En24
  SIGNAL Product5_cast_1                  : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product5_out1                    : signed(15 DOWNTO 0);  -- sfix16_En6
  SIGNAL Add1_sub_cast                    : signed(31 DOWNTO 0);  -- sfix32_En9
  SIGNAL Add1_sub_cast_1                  : signed(31 DOWNTO 0);  -- sfix32_En9
  SIGNAL Add1_sub_temp                    : signed(31 DOWNTO 0);  -- sfix32_En9
  SIGNAL Add1_out1                        : signed(15 DOWNTO 0);  -- sfix16_En6
  SIGNAL Constant4_out1                   : unsigned(15 DOWNTO 0);  -- ufix16_En5
  SIGNAL Add2_add_cast                    : signed(31 DOWNTO 0);  -- sfix32_En6
  SIGNAL Add2_add_cast_1                  : signed(31 DOWNTO 0);  -- sfix32_En6
  SIGNAL Add2_add_temp                    : signed(31 DOWNTO 0);  -- sfix32_En6
  SIGNAL Add2_add_cast_2                  : signed(31 DOWNTO 0);  -- sfix32_En6
  SIGNAL Add2_add_temp_1                  : signed(31 DOWNTO 0);  -- sfix32_En6
  SIGNAL Add2_out1                        : signed(15 DOWNTO 0);  -- sfix16_En5

BEGIN
  In1_signed <= signed(In1(15 downto 0));

  Constant1_out1 <= to_unsigned(16#6488#, 16);

  In2_signed <= signed(In2(15 downto 0));

  Product_mul_temp <= In1_signed * In1_signed;
  Product_out1 <= unsigned(Product_mul_temp(30 DOWNTO 15));

  Constant_out1 <= to_unsigned(16#2800#, 16);

  Product1_cast <= signed(resize(Constant1_out1, 17));
  Product1_mul_temp <= Product1_cast * In1_signed;
  Product1_cast_1 <= Product1_mul_temp(31 DOWNTO 0);
  Product1_out1 <= Product1_cast_1(30 DOWNTO 15);

  LUT_output : PROCESS (Product1_out1)
    VARIABLE dout_low : signed(15 DOWNTO 0);
    VARIABLE k : unsigned(6 DOWNTO 0);
    VARIABLE f : unsigned(31 DOWNTO 0);
    VARIABLE sub_temp : signed(15 DOWNTO 0);
    VARIABLE cast : unsigned(6 DOWNTO 0);
    VARIABLE cast_0 : signed(15 DOWNTO 0);
    VARIABLE mul_temp : signed(31 DOWNTO 0);
    VARIABLE add_cast : signed(32 DOWNTO 0);
    VARIABLE add_temp : signed(32 DOWNTO 0);
    VARIABLE sub_cast : signed(15 DOWNTO 0);
    VARIABLE sub_temp_0 : signed(15 DOWNTO 0);
    VARIABLE cast_1 : signed(47 DOWNTO 0);
    VARIABLE cast_2 : signed(47 DOWNTO 0);
    VARIABLE cast_3 : signed(47 DOWNTO 0);
    VARIABLE add_cast_0 : signed(48 DOWNTO 0);
    VARIABLE cast_4 : signed(32 DOWNTO 0);
    VARIABLE sub_temp_1 : signed(15 DOWNTO 0);
    VARIABLE mul_temp_0 : signed(48 DOWNTO 0);
    VARIABLE add_cast_1 : signed(47 DOWNTO 0);
    VARIABLE add_cast_2 : signed(48 DOWNTO 0);
    VARIABLE add_temp_0 : signed(48 DOWNTO 0);
  BEGIN
    IF Product1_out1 <= to_signed(-16#4058#, 16) THEN 
      k := to_unsigned(16#00#, 7);
    ELSIF Product1_out1 >= to_signed(16#4028#, 16) THEN 
      k := to_unsigned(16#40#, 7);
    ELSE 
      sub_temp := Product1_out1 - to_signed(-16#4058#, 16);
      cast := unsigned(sub_temp(15 DOWNTO 9));
      k := cast srl 0;
    END IF;
    IF (Product1_out1 <= to_signed(-16#4058#, 16)) OR (Product1_out1 >= to_signed(16#4028#, 16)) THEN 
      f := to_unsigned(0, 32);
    ELSE 
      cast_0 := signed(k & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0');
      mul_temp := to_signed(16#0202#, 16) * cast_0;
      add_cast := resize(mul_temp, 33);
      add_temp := to_signed(-8433664, 33) + add_cast;
      sub_cast := add_temp(24 DOWNTO 9);
      sub_temp_0 := Product1_out1 - sub_cast;
      cast_1 := sub_temp_0 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
      cast_2 := resize(cast_1(47 DOWNTO 9), 48);
      cast_3 := cast_2 srl 0;
      f := unsigned(cast_3(31 DOWNTO 0));
    END IF;
    dout_low := LUT_data(to_integer(k));
    IF k = to_unsigned(16#40#, 7) THEN 
      NULL;
    ELSE 
      k := k + to_unsigned(16#01#, 7);
    END IF;
    add_cast_0 := resize(dout_low & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 49);
    cast_4 := signed(resize(f, 33));
    sub_temp_1 := LUT_data(to_integer(k)) - dout_low;
    mul_temp_0 := cast_4 * sub_temp_1;
    add_cast_1 := mul_temp_0(47 DOWNTO 0);
    add_cast_2 := resize(add_cast_1, 49);
    add_temp_0 := add_cast_0 + add_cast_2;
    LUT_out1 <= add_temp_0(47 DOWNTO 32);
  END PROCESS LUT_output;


  Product2_cast <= signed(resize(Constant_out1, 17));
  Product2_mul_temp <= Product2_cast * LUT_out1;
  Product2_cast_1 <= Product2_mul_temp(31 DOWNTO 0);
  Product2_out1 <= resize(Product2_cast_1(31 DOWNTO 18), 16);

  Add_sub_cast <= signed(resize(Product_out1, 32));
  Add_sub_cast_1 <= resize(Product2_out1 & '0' & '0' & '0', 32);
  Add_sub_temp <= Add_sub_cast - Add_sub_cast_1;
  Add_out1 <= Add_sub_temp(18 DOWNTO 3);

  Product3_mul_temp <= In2_signed * In2_signed;
  Product3_out1 <= unsigned(Product3_mul_temp(30 DOWNTO 15));

  Constant2_out1 <= to_unsigned(16#2800#, 16);

  Product4_cast <= signed(resize(Constant1_out1, 17));
  Product4_mul_temp <= Product4_cast * In2_signed;
  Product4_cast_1 <= Product4_mul_temp(31 DOWNTO 0);
  Product4_out1 <= Product4_cast_1(30 DOWNTO 15);

  LUT1_output : PROCESS (Product4_out1)
    VARIABLE dout_low1 : signed(15 DOWNTO 0);
    VARIABLE k1 : unsigned(6 DOWNTO 0);
    VARIABLE f1 : unsigned(31 DOWNTO 0);
    VARIABLE sub_temp1 : signed(15 DOWNTO 0);
    VARIABLE cast1 : unsigned(6 DOWNTO 0);
    VARIABLE cast_01 : signed(15 DOWNTO 0);
    VARIABLE mul_temp1 : signed(31 DOWNTO 0);
    VARIABLE add_cast1 : signed(32 DOWNTO 0);
    VARIABLE add_temp1 : signed(32 DOWNTO 0);
    VARIABLE sub_cast1 : signed(15 DOWNTO 0);
    VARIABLE sub_temp_01 : signed(15 DOWNTO 0);
    VARIABLE cast_11 : signed(47 DOWNTO 0);
    VARIABLE cast_21 : signed(47 DOWNTO 0);
    VARIABLE cast_31 : signed(47 DOWNTO 0);
    VARIABLE add_cast_01 : signed(48 DOWNTO 0);
    VARIABLE cast_41 : signed(32 DOWNTO 0);
    VARIABLE sub_temp_11 : signed(15 DOWNTO 0);
    VARIABLE mul_temp_01 : signed(48 DOWNTO 0);
    VARIABLE add_cast_11 : signed(47 DOWNTO 0);
    VARIABLE add_cast_21 : signed(48 DOWNTO 0);
    VARIABLE add_temp_01 : signed(48 DOWNTO 0);
  BEGIN
    IF Product4_out1 <= to_signed(-16#4058#, 16) THEN 
      k1 := to_unsigned(16#00#, 7);
    ELSIF Product4_out1 >= to_signed(16#4028#, 16) THEN 
      k1 := to_unsigned(16#40#, 7);
    ELSE 
      sub_temp1 := Product4_out1 - to_signed(-16#4058#, 16);
      cast1 := unsigned(sub_temp1(15 DOWNTO 9));
      k1 := cast1 srl 0;
    END IF;
    IF (Product4_out1 <= to_signed(-16#4058#, 16)) OR (Product4_out1 >= to_signed(16#4028#, 16)) THEN 
      f1 := to_unsigned(0, 32);
    ELSE 
      cast_01 := signed(k1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0');
      mul_temp1 := to_signed(16#0202#, 16) * cast_01;
      add_cast1 := resize(mul_temp1, 33);
      add_temp1 := to_signed(-8433664, 33) + add_cast1;
      sub_cast1 := add_temp1(24 DOWNTO 9);
      sub_temp_01 := Product4_out1 - sub_cast1;
      cast_11 := sub_temp_01 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
      cast_21 := resize(cast_11(47 DOWNTO 9), 48);
      cast_31 := cast_21 srl 0;
      f1 := unsigned(cast_31(31 DOWNTO 0));
    END IF;
    dout_low1 := LUT1_data(to_integer(k1));
    IF k1 = to_unsigned(16#40#, 7) THEN 
      NULL;
    ELSE 
      k1 := k1 + to_unsigned(16#01#, 7);
    END IF;
    add_cast_01 := resize(dout_low1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 49);
    cast_41 := signed(resize(f1, 33));
    sub_temp_11 := LUT1_data(to_integer(k1)) - dout_low1;
    mul_temp_01 := cast_41 * sub_temp_11;
    add_cast_11 := mul_temp_01(47 DOWNTO 0);
    add_cast_21 := resize(add_cast_11, 49);
    add_temp_01 := add_cast_01 + add_cast_21;
    LUT1_out1 <= add_temp_01(47 DOWNTO 32);
  END PROCESS LUT1_output;


  Product5_cast <= signed(resize(Constant2_out1, 17));
  Product5_mul_temp <= Product5_cast * LUT1_out1;
  Product5_cast_1 <= Product5_mul_temp(31 DOWNTO 0);
  Product5_out1 <= resize(Product5_cast_1(31 DOWNTO 18), 16);

  Add1_sub_cast <= signed(resize(Product3_out1, 32));
  Add1_sub_cast_1 <= resize(Product5_out1 & '0' & '0' & '0', 32);
  Add1_sub_temp <= Add1_sub_cast - Add1_sub_cast_1;
  Add1_out1 <= Add1_sub_temp(18 DOWNTO 3);

  Constant4_out1 <= to_unsigned(16#0280#, 16);

  Add2_add_cast <= resize(Add_out1, 32);
  Add2_add_cast_1 <= resize(Add1_out1, 32);
  Add2_add_temp <= Add2_add_cast + Add2_add_cast_1;
  Add2_add_cast_2 <= signed(resize(Constant4_out1 & '0', 32));
  Add2_add_temp_1 <= Add2_add_temp + Add2_add_cast_2;
  Add2_out1 <= Add2_add_temp_1(16 DOWNTO 1);

  Out1 <= std_logic_vector(Add2_out1);

END rtl;

